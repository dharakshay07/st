OOPs : Object oriented programing

1. Class :
=> Collection of data members and member functions.
=> doesn't occupie any memory.
=> blue print of object.

2. Object :
=> instance if class.
=> real world entity.
=> will occupie memory.

Example : 
Class vehical
-data members:
~No of wheels
~no of Seat
~Color

member functios:
~Start();
~Break();
~accelerate();

Vehical car
car.no of wheels: 4
car.no of seat : 5
car.color : Any

car.start();
car.break();

vehical bike

vehical auto_rixa

3. Encapsulation :
=>Wrapping up of data into single unit.
=>process of making class is encapsulation.

4. Abstraction :
=> Showing only what is essential.

5. Inheritance :
=>inheritaing one class properties intio another class.
=>to recude the code duplication.

5 types :
1. Single:

	A	//Parent
	|
	V
	B	//Child

2. Multi level :

	A	//grand-parent
	|
	V
	B	//parent
	|
	V
	C	//child

3. Multiple:

	A		B	//parent
	|		|
	-----------------
		|
		V
		C		//Child

4. Heirarchical :

		A		//parent
		|
	-----------------
	|		|
	V		V
	B		C	//Child

5. Hybrid :

		A		//gand-parent
		|
	-----------------
	|		|
	V		V
	B		C	//Parent
	|		|
	-----------------
		|
		V
		D		//Child


6. Polymorphisam :
=>poly : many
=>morphisam : forms
=>one name having many forms.

2 types: 
1. Method Overloading : 
-Compile time polymorphisam
problem :
-one class having same name methods.
solution:
- every methods must haver diffrent numbers and type of parameters/arguments.

2. Methods Overriding :
-Run time polymorphisam
problem:
-while inheritnaced class have same name methods, always child class method is 
called.
solution:
-call method using class name with scope resoltion operater(::)

objectname.(parent)classname::method();
